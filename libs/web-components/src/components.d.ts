/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TauAnchor, TauBold, TauButtonType, TauSize, TauVariant } from "./utils/types";
export namespace Components {
    interface TauAccordion {
        "open": boolean;
    }
    interface TauAccordionBar {
        "active": boolean;
    }
    interface TauAccordionContent {
        "active": boolean;
    }
    interface TauButton {
        "block": boolean;
        "bold": TauBold;
        "disable": boolean;
        "href": string;
        "size": TauSize;
        "type": TauButtonType;
        "variant": TauVariant;
    }
    interface TauCheckbox {
        "checked": boolean;
        "disable": boolean;
        "icon": string;
        "size": TauSize;
    }
    interface TauDrawer {
        "anchor": TauAnchor;
        "blurShadow": boolean;
        "color": string;
        "open": boolean;
        "shadow": boolean;
        "zIndex": number;
    }
    interface TauFlex {
        "flex": number;
        "gap": string;
    }
    interface TauIcon {
        "alt": string;
        "fill": 'outline' | 'solid';
        "height": number;
        "name": string;
        "svg": string;
        "url": string;
        "width": number;
    }
    interface TauOption {
        "value": number;
    }
    interface TauPage {
        "withScroll": boolean;
    }
    interface TauRipple {
        "disable": boolean;
    }
    interface TauSelect {
        "active": boolean;
        "placeholder": string;
    }
    interface TauSwitch {
        "checked": boolean;
        "disable": boolean;
        "size": TauSize;
    }
    interface TauTheme {
        "constrast": boolean;
        "theme": string;
    }
}
declare global {
    interface HTMLTauAccordionElement extends Components.TauAccordion, HTMLStencilElement {
    }
    var HTMLTauAccordionElement: {
        prototype: HTMLTauAccordionElement;
        new (): HTMLTauAccordionElement;
    };
    interface HTMLTauAccordionBarElement extends Components.TauAccordionBar, HTMLStencilElement {
    }
    var HTMLTauAccordionBarElement: {
        prototype: HTMLTauAccordionBarElement;
        new (): HTMLTauAccordionBarElement;
    };
    interface HTMLTauAccordionContentElement extends Components.TauAccordionContent, HTMLStencilElement {
    }
    var HTMLTauAccordionContentElement: {
        prototype: HTMLTauAccordionContentElement;
        new (): HTMLTauAccordionContentElement;
    };
    interface HTMLTauButtonElement extends Components.TauButton, HTMLStencilElement {
    }
    var HTMLTauButtonElement: {
        prototype: HTMLTauButtonElement;
        new (): HTMLTauButtonElement;
    };
    interface HTMLTauCheckboxElement extends Components.TauCheckbox, HTMLStencilElement {
    }
    var HTMLTauCheckboxElement: {
        prototype: HTMLTauCheckboxElement;
        new (): HTMLTauCheckboxElement;
    };
    interface HTMLTauDrawerElement extends Components.TauDrawer, HTMLStencilElement {
    }
    var HTMLTauDrawerElement: {
        prototype: HTMLTauDrawerElement;
        new (): HTMLTauDrawerElement;
    };
    interface HTMLTauFlexElement extends Components.TauFlex, HTMLStencilElement {
    }
    var HTMLTauFlexElement: {
        prototype: HTMLTauFlexElement;
        new (): HTMLTauFlexElement;
    };
    interface HTMLTauIconElement extends Components.TauIcon, HTMLStencilElement {
    }
    var HTMLTauIconElement: {
        prototype: HTMLTauIconElement;
        new (): HTMLTauIconElement;
    };
    interface HTMLTauOptionElement extends Components.TauOption, HTMLStencilElement {
    }
    var HTMLTauOptionElement: {
        prototype: HTMLTauOptionElement;
        new (): HTMLTauOptionElement;
    };
    interface HTMLTauPageElement extends Components.TauPage, HTMLStencilElement {
    }
    var HTMLTauPageElement: {
        prototype: HTMLTauPageElement;
        new (): HTMLTauPageElement;
    };
    interface HTMLTauRippleElement extends Components.TauRipple, HTMLStencilElement {
    }
    var HTMLTauRippleElement: {
        prototype: HTMLTauRippleElement;
        new (): HTMLTauRippleElement;
    };
    interface HTMLTauSelectElement extends Components.TauSelect, HTMLStencilElement {
    }
    var HTMLTauSelectElement: {
        prototype: HTMLTauSelectElement;
        new (): HTMLTauSelectElement;
    };
    interface HTMLTauSwitchElement extends Components.TauSwitch, HTMLStencilElement {
    }
    var HTMLTauSwitchElement: {
        prototype: HTMLTauSwitchElement;
        new (): HTMLTauSwitchElement;
    };
    interface HTMLTauThemeElement extends Components.TauTheme, HTMLStencilElement {
    }
    var HTMLTauThemeElement: {
        prototype: HTMLTauThemeElement;
        new (): HTMLTauThemeElement;
    };
    interface HTMLElementTagNameMap {
        "tau-accordion": HTMLTauAccordionElement;
        "tau-accordion-bar": HTMLTauAccordionBarElement;
        "tau-accordion-content": HTMLTauAccordionContentElement;
        "tau-button": HTMLTauButtonElement;
        "tau-checkbox": HTMLTauCheckboxElement;
        "tau-drawer": HTMLTauDrawerElement;
        "tau-flex": HTMLTauFlexElement;
        "tau-icon": HTMLTauIconElement;
        "tau-option": HTMLTauOptionElement;
        "tau-page": HTMLTauPageElement;
        "tau-ripple": HTMLTauRippleElement;
        "tau-select": HTMLTauSelectElement;
        "tau-switch": HTMLTauSwitchElement;
        "tau-theme": HTMLTauThemeElement;
    }
}
declare namespace LocalJSX {
    interface TauAccordion {
        "onTauChange"?: (event: CustomEvent<boolean>) => void;
        "open"?: boolean;
    }
    interface TauAccordionBar {
        "active"?: boolean;
        "onTauChange"?: (event: CustomEvent<boolean>) => void;
    }
    interface TauAccordionContent {
        "active"?: boolean;
        "onTauChange"?: (event: CustomEvent<boolean>) => void;
    }
    interface TauButton {
        "block"?: boolean;
        "bold"?: TauBold;
        "disable"?: boolean;
        "href"?: string;
        "onTauReset"?: (event: CustomEvent<boolean>) => void;
        "onTauSubmit"?: (event: CustomEvent<boolean>) => void;
        "size"?: TauSize;
        "type"?: TauButtonType;
        "variant"?: TauVariant;
    }
    interface TauCheckbox {
        "checked"?: boolean;
        "disable"?: boolean;
        "icon"?: string;
        "onTauChange"?: (event: CustomEvent<boolean>) => void;
        "size"?: TauSize;
    }
    interface TauDrawer {
        "anchor"?: TauAnchor;
        "blurShadow"?: boolean;
        "color"?: string;
        "onTauClose"?: (event: CustomEvent<boolean>) => void;
        "open"?: boolean;
        "shadow"?: boolean;
        "zIndex"?: number;
    }
    interface TauFlex {
        "flex"?: number;
        "gap"?: string;
    }
    interface TauIcon {
        "alt"?: string;
        "fill"?: 'outline' | 'solid';
        "height"?: number;
        "name"?: string;
        "svg"?: string;
        "url"?: string;
        "width"?: number;
    }
    interface TauOption {
        "value"?: number;
    }
    interface TauPage {
        "withScroll"?: boolean;
    }
    interface TauRipple {
        "disable"?: boolean;
    }
    interface TauSelect {
        "active"?: boolean;
        "onTauChange"?: (event: CustomEvent<number>) => void;
        "placeholder"?: string;
    }
    interface TauSwitch {
        "checked"?: boolean;
        "disable"?: boolean;
        "onTauChange"?: (event: CustomEvent<boolean>) => void;
        "size"?: TauSize;
    }
    interface TauTheme {
        "constrast"?: boolean;
        "onTauLimn"?: (event: CustomEvent<object>) => void;
        "theme"?: string;
    }
    interface IntrinsicElements {
        "tau-accordion": TauAccordion;
        "tau-accordion-bar": TauAccordionBar;
        "tau-accordion-content": TauAccordionContent;
        "tau-button": TauButton;
        "tau-checkbox": TauCheckbox;
        "tau-drawer": TauDrawer;
        "tau-flex": TauFlex;
        "tau-icon": TauIcon;
        "tau-option": TauOption;
        "tau-page": TauPage;
        "tau-ripple": TauRipple;
        "tau-select": TauSelect;
        "tau-switch": TauSwitch;
        "tau-theme": TauTheme;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "tau-accordion": LocalJSX.TauAccordion & JSXBase.HTMLAttributes<HTMLTauAccordionElement>;
            "tau-accordion-bar": LocalJSX.TauAccordionBar & JSXBase.HTMLAttributes<HTMLTauAccordionBarElement>;
            "tau-accordion-content": LocalJSX.TauAccordionContent & JSXBase.HTMLAttributes<HTMLTauAccordionContentElement>;
            "tau-button": LocalJSX.TauButton & JSXBase.HTMLAttributes<HTMLTauButtonElement>;
            "tau-checkbox": LocalJSX.TauCheckbox & JSXBase.HTMLAttributes<HTMLTauCheckboxElement>;
            "tau-drawer": LocalJSX.TauDrawer & JSXBase.HTMLAttributes<HTMLTauDrawerElement>;
            "tau-flex": LocalJSX.TauFlex & JSXBase.HTMLAttributes<HTMLTauFlexElement>;
            "tau-icon": LocalJSX.TauIcon & JSXBase.HTMLAttributes<HTMLTauIconElement>;
            "tau-option": LocalJSX.TauOption & JSXBase.HTMLAttributes<HTMLTauOptionElement>;
            "tau-page": LocalJSX.TauPage & JSXBase.HTMLAttributes<HTMLTauPageElement>;
            "tau-ripple": LocalJSX.TauRipple & JSXBase.HTMLAttributes<HTMLTauRippleElement>;
            "tau-select": LocalJSX.TauSelect & JSXBase.HTMLAttributes<HTMLTauSelectElement>;
            "tau-switch": LocalJSX.TauSwitch & JSXBase.HTMLAttributes<HTMLTauSwitchElement>;
            "tau-theme": LocalJSX.TauTheme & JSXBase.HTMLAttributes<HTMLTauThemeElement>;
        }
    }
}
